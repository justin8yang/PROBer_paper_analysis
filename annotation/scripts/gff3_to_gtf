#!/usr/bin/env python2

from sys import argv, exit
import re

if len(argv) != 4:
    print("Usage: gff3_to_gtf input.gff output.gtf RNA_patterns")
    exit(-1)

exons = []
trans2gene = dict()

rgx = re.compile("[\t ]+")
rgx2 = re.compile("^(" + "|".join(argv[3].split(",")) + ")$")

fin = open(argv[1], "r")
for line in fin:
    if line.find("##FASTA") >= 0:
        break
    if line.find("#") >= 0:
        continue

    arr = rgx.split(line)
    
    if arr[2] == "exon":
        exons.append(line.strip())
    elif rgx2.search(arr[2]) != None:
        tid = None
        gid = None
        for attribute in arr[8].split(';'):
            if tid == None and attribute.startswith("ID="):
                tid = attribute[3:].strip()
            if gid == None and attribute.startswith("Parent="):
                gid = attribute[7:].strip()
            if tid != None and gid != None:
                break
        if tid != None and gid != None:
            trans2gene[tid] = gid
fin.close()

fout = open(argv[2], "w")
for line in exons:
    (fields, sep, attributes) = line.rpartition('\t')
    pos = attributes.find("Parent=")
    if pos < 0:
        print("Line \"" + line + "\" does not contain a Parent attribute!")
        exit(-1)
    pos += 7
    rpos = attributes.find(';', pos)
    if rpos < 0:
        rpos = len(attributes)
    
    tids = attributes[pos:rpos].split(',')
    for tid in tids:
        tid = tid.strip()
        gid = trans2gene.get(tid, None)
        if gid != None:
            fout.write("{}\tgene_id \"{}\"; transcript_id \"{}\";\n".format(fields, gid, tid))

fout.close()
