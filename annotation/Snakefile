ANNO_PATH = "annotation"
ANNOTATIONS = expand("{ANNO_PATH}/{name}_rRNA.{suffix}", ANNO_PATH = ANNO_PATH, name = ["18S", "25S"], suffix = ["fa", "structure"])
ANNOTATIONS.extend(expand("{ANNO_PATH}/arabidopsis_{name}.{suffix}", ANNO_PATH = ANNO_PATH, name = ["filtered", "spike"], suffix = ["fa", "t2g"]))

SHAPE_RNAS = expand("{ANNO_PATH}/{name}", ANNO_PATH = ANNO_PATH, name = ["RNaseP_WT", "pT181_long", "pT181_short"])
ANNOTATIONS.extend(expand("{name}.{suffix}", name = SHAPE_RNAS, suffix = ["gamma", "beta"]))


rule unzip_TAIR10:
     input: "{}/TAIR10.zip".format(ANNO_PATH)
     output: "{}/TAIR10_chr_all.fas".format(ANNO_PATH),
             "{}/TAIR10_GFF3_genes.gff".format(ANNO_PATH)
     shell: "unzip {input} -d {ANNO_PATH} ; touch {output}"

rule unzip_ground_truth_bpseq:
     input: "{}/ground_truth.bpseq.zip".format(ANNO_PATH)
     output: "{}/18S_rRNA.bpseq".format(ANNO_PATH),
             "{}/25S_rRNA.bpseq".format(ANNO_PATH)
     shell: "unzip {input} -d {ANNO_PATH} ; touch {output}"

rule unzip_SHAPE_data:
     input: "{}/SHAPE_data.zip".format(ANNO_PATH)
     output: expand("{name}.adducts", name = SHAPE_RNAS),
             "{}/SHAPE.t2g".format(ANNO_PATH),
             "{}/spikes_info.txt".format(ANNO_PATH)
     shell: "unzip {input} -d {ANNO_PATH} ; touch {output}"

rule extract_info_from_bpseq:
     input: "{}/{{rna_name}}.bpseq".format(ANNO_PATH)
     output: expand("{path}/{{rna_name}}.{suffix}", path = ANNO_PATH, suffix = ["fa", "structure"])
     shell: "{ANNO_PATH}/scripts/extractInfoFromBPSeq {input} {ANNO_PATH}/{wildcards.rna_name}"

rule convert:
     input: rules.unzip_TAIR10.output[0]
     output: "{}/TAIR10_chr_all.fa".format(ANNO_PATH)
     shell: "{ANNO_PATH}/scripts/convert {input} {output}"

rule generate_gtf:
     input: rules.unzip_TAIR10.output[1]
     output: "{}/TAIR10_GTF_genes.gtf".format(ANNO_PATH)
     shell: "{ANNO_PATH}/scripts/gff3_to_gtf {input} {output} mRNA,rRNA,ncRNA,snRNA,tRNA,miRNA,snoRNA"

rule combine_two_fasta:
     input: "{}/18S_rRNA.fa".format(ANNO_PATH),
            "{}/25S_rRNA.fa".format(ANNO_PATH)
     output: "{}/rRNAs.fa".format(ANNO_PATH)
     shell: "cat {input[0]} {input[1]} > {output}"

rule generate_filtered_reference:
     input: rules.convert.output,
            rules.generate_gtf.output,
            "{}/remove_list.txt".format(ANNO_PATH),
            rules.combine_two_fasta.output
     params: "{}/arabidopsis_filtered".format(ANNO_PATH)
     output: expand("{ANNO_PATH}/arabidopsis_filtered.{suffix}", ANNO_PATH = ANNO_PATH, suffix = ["fa", "t2g", "dup"])
     shell: "{ANNO_PATH}/scripts/genome_to_transcript_set {input} {params}"

rule process_SHAPE_data:
     input: "{}/{{shape_name}}.adducts".format(ANNO_PATH)
     output: expand("{path}/{{shape_name}}.{suffix}", path = ANNO_PATH, suffix = ["fa", "gamma", "beta"])
     shell: "{ANNO_PATH}/scripts/processSHAPEdata {input} {ANNO_PATH}/{wildcards.shape_name}"
 
rule generate_spike_in_reference:
     input: expand("{rna}.fa", rna = SHAPE_RNAS), 
            rules.generate_filtered_reference.output[:2],
            rules.unzip_SHAPE_data.output[3]
     output: expand("{ANNO_PATH}/arabidopsis_spike.{suffix}", ANNO_PATH = ANNO_PATH, suffix = ["fa", "t2g"])
     run:
        shell("cat {input[0]} {input[1]} {input[2]} {input[3]} > {output[0]}")
        shell("cat {input[5]} {input[4]} > {output[1]}")

