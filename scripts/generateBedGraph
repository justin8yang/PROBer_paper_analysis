#!/usr/bin/env python

from sys import argv, exit
from math import ceil

def collectBedGraphRecords(input_file, chr, strand, start, end):
	""" Collect BedGraph records from site_info file """
	""" start and end are 0-based """

	seen =  False
	bg_records_tot = []
	bg_records_uniq = []
	maxv = 0.0
	with open(input_file) as fin:
		for line in fin:
			fields = line.strip().split()
			if chr != fields[0] or strand != fields[1]:
				if seen:
					break
				else:
					continue
	
			seen = True
			pos = int(fields[2])
			if pos >= start and pos <= end:
				uniq = int(fields[3])
				multi = float(fields[4])
				tot = uniq + multi
				if tot > 0.0:
					maxv = max(maxv, tot)
					bg_records_tot.append("chr{chr} {start} {end} {value:.2f}".format(chr = chr, start = pos, end = pos + 1, value = tot))
				if uniq > 0:
					bg_records_uniq.append("chr{chr} {start} {end} {value}".format(chr = chr, start = pos, end = pos + 1, value = uniq))
	
	return (bg_records_tot, bg_records_uniq, int(ceil(maxv)))
	
def generateBedGraphFile(output, chr, start, end, bg_records_tot, bg_records_uniq, maxv):
	""" Generate bedGraph files """
	""" start and end are 1-based """

	with open(output, "w") as fout:
		fout.write("browser position chr{chr}:{start}-{end}\n".format(chr = chr, start = start, end = end))
		fout.write("browser hide all\n")
		fout.write("browser pack refGene\n")

		track_settings = "visibility=full color=200,100,0 altColor=0,100,200 priority=20 autoScale=off viewLimits=0:{} yLineMark=10 yLineOnOff=on".format(maxv)
		fout.write("track type=bedGraph name=\"all\" description=\"using all reads\" {}\n".format(track_settings))
		for line in bg_records_tot:
			fout.write(line + "\n")
		fout.write("track type=bedGraph name=\"unique\" description=\"using only unique reads\" {}\n".format(track_settings))
		for line in bg_records_uniq:
			fout.write(line + "\n")

if len(argv) != 7:
	print("generateBedGraph chr strand start end site_info_file output")
	exit(-1)

chr = argv[1]
strand = argv[2]
start = int(argv[3])
end = int(argv[4])

bg_records_tot, bg_records_uniq, maxv = collectBedGraphRecords(argv[5], chr, strand, start - 1, end - 1)
generateBedGraphFile(argv[6], chr, start, end, bg_records_tot, bg_records_uniq, maxv)
