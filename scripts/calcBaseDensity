#!/usr/bin/env python

from sys import argv, exit
import pysam


try:
    xrange
except NameError:
    xrange = range


def update(alignments):
    if len(alignments) == 0:
        return

    frac = 1.0 / len(alignments)
    for (tid, start, end) in alignments:
        assert tid != None and start != None and end != None
        i = tid if requireAll else tid2num.get(tid, -1)
        if i >= 0:
            for pos in xrange(start, end):
                vectors[i][pos] += frac

### Designed only for reproducing PROBer paper

if len(argv) < 4:
    print("Usage: calcBaseDensity input.bam output.txt [all | name1 name2 ...]")
    exit(-1)

sam_in = pysam.AlignmentFile(argv[1], "rb")

vectors = []
tid2num = dict()

requireAll = False

if argv[3].startswith("all"):
    requireAll = True
    M = sam_in.nreferences
    for i in xrange(M):
        vector = [0] * sam_in.lengths[i]
        vectors.append(vector)
else:
    for i in xrange(3, len(argv)):
        if argv[i] in sam_in.references:
            tid = sam_in.references.index(argv[i])
            vector = [0] * sam_in.lengths[tid]
            vectors.append(vector)
            tid2num[tid] = i - 3
        else:
            print("Warning: {} is not a valid transcript id!".format(argv[i]))


cnt = 0
cname = ""
alignments = []

for aread in sam_in:
    if not aread.is_unmapped and (not aread.is_paired or aread.is_paired and aread.is_read1):
        assert not aread.is_reverse

        if cname != aread.query_name:
            update(alignments)
            cname = aread.query_name
            alignments = []

        if not aread.is_paired:
            alignments.append((aread.reference_id, aread.reference_start, aread.reference_end))
        else:
            alignments.append((aread.reference_id, aread.reference_start, aread.reference_start + aread.template_length))
            
    cnt += 1
    if cnt % 1000000 == 0:
        print("{} FIN!".format(cnt))

update(alignments)


fout = open(argv[2], "w")
for i in xrange(len(vectors)):
    fout.write(" ".join(["{:.2f}".format(x) for x in vectors[i]]) + "\n")
fout.close()
