#!/usr/bin/env python


try:
    xrange
except NameError:
    xrange = range


from sys import argv, exit
import pysam
import copy

class Pair:
    def __init__(self, tid, pos):
        self.tid = tid
        self.pos = pos

def loadMap(map_file):
    fin = open(map_file)
    prev = curr = gid = -1
    genes = []
    for line in fin:
        curr = int(line[:-1])
        if gid >= 0:
            genes.extend([gid] * (curr - prev))
        prev = curr
        gid = gid + 1
    fin.close()

    return genes

def updateVec(pairs):
    size = len(pairs)
    if size == 0:
        return

    gid = genes[pairs[0].tid]
    for i in xrange(1, size):
        if gid != genes[pairs[i].tid]:
            return

    for i in xrange(size):
        vectors[pairs[i].tid][pairs[i].pos] += 1

if len(argv) != 4:
    print("Usage: python extractCountVectorsForDing ref_name.grp input.bam output.txt")
    exit(-1)

genes = loadMap(argv[1])

sam_in = pysam.Samfile(argv[2], "rb")

M = sam_in.nreferences
vectors = []
for i in xrange(M):
    vector = [0] * sam_in.lengths[i]
    vectors.append(vector)
    if (i + 1) % 5000 == 0:
        print("FIN {}!".format(i + 1))

print("Preparation is done!")

cnt = 0
cqname = None
pairs = []

for aread in sam_in:
    if (not aread.is_unmapped) and (not aread.is_paired or aread.is_read1) and (not ("ZF" in dict(aread.tags))):
        assert not aread.is_reverse

        if cqname == None or cqname != aread.qname:
            updateVec(pairs)
            cqname = aread.qname
            pairs = []
        
        pairs.append(Pair(aread.tid, aread.pos))

    cnt += 1
    if cnt % 1000000 == 0:
        print("{} FIN!".format(cnt))

updateVec(pairs)

fout = open(argv[3], "w")
for i in xrange(len(vectors)):
    fout.write(" ".join(["{:.2f}".format(x) for x in vectors[i]]) + "\n")
fout.close()
