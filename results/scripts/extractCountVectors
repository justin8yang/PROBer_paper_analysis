#!/usr/bin/env python

from sys import argv, exit
import pysam


try:
    xrange
except NameError:
    xrange = range


def loadMap(map_file):
    genes = []

    with open(map_file) as fin:
        prev = curr = gid = -1
        for line in fin:
            curr = int(line[:-1])
            if gid >= 0:
                genes.extend([gid] * (curr - prev))
            prev = curr
            gid += 1

    return genes


def gene_multi(alignments):
    if len(alignments) <= 1:
        return False

    gid = genes[alignments[0][0]]
    for i in xrange(1, len(alignments)):
        if gid != genes[alignments[i][0]]:
            return True

    return False


def update(alignments):
    if len(alignments) == 0 or len(genes) > 0 and gene_multi(alignments):
        return

    frac = 1.0 / len(alignments) if len(genes) == 0 else 1.0
    for (tid, pos) in alignments:
        i = tid if requireAll else tid2num.get(tid, -1)
        if i >= 0:
            vectors[i][pos] += frac


if len(argv) < 5:
    print("Usage: python extractCountVectors input.bam <ref_name.grp/None> output.txt [all | name1 name2 ...]")
    exit(-1)

sam_in = pysam.AlignmentFile(argv[1], "rb")

genes = []
if argv[2] != "None":
    genes = loadMap(argv[2])


vectors = []
tid2num = dict()

requireAll = False

if argv[4] == "all":
    requireAll = True
    M = sam_in.nreferences
    for i in xrange(M):
        vector = [0] * sam_in.lengths[i]
        vectors.append(vector)
else:
    for i in xrange(4, len(argv)):
        if argv[i] in sam_in.references:
            tid = sam_in.references.index(argv[i])
            vector = [0] * sam_in.lengths[tid]
            vectors.append(vector)
            tid2num[tid] = i - 4
        else:
            print("Warning: {} is not a valid transcript id!".format(argv[i]))


cnt = 0
cname = ""
alignments = []

for aread in sam_in:
    if not aread.is_unmapped:
        assert not aread.is_reverse and not aread.is_paired

        if cname != aread.query_name:
            update(alignments)
            cname = aread.query_name
            alignments = []

        alignments.append((aread.reference_id, aread.reference_start))

    cnt += 1
    if cnt % 1000000 == 0:
        print("{} FIN!".format(cnt))

update(alignments)

print("Begin to generate outputs.")
fout = open(argv[3], "w")
for i in xrange(len(vectors)):
    fout.write(" ".join(["{:.6f}".format(x) for x in vectors[i]]) + "\n")
fout.close()
print("Done.")
