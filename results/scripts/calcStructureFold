#!/usr/bin/env python

from sys import argv, exit
import math
import numpy

if len(argv) != 4:
    print("Usage: python calcStructureFold minus.counts plus.counts output.txt")
    exit(-1)

def convert(arr):
    res = [math.log(float(x) + 1.0) for x in arr]
    l = float(len(res))
    res.append(0.0)
    denom = sum(res) / l
    res = [(x / denom if denom > 0.0 else 0.0) for x in res]
    return res

def calc_norm_factor(data):
    data.sort(reverse = True)
    s = len(data)
    fr = int(round(float(s) / 100.0 * 2.0))
    to = int(round(float(s) / 100.0 * 10.0))
    return numpy.mean(data[fr:to])


fm = open(argv[1])
fp = open(argv[2])

cnt = 0
RSRs = []
data = []

for line in fm:
    line2 = fp.readline()

    mc = convert(line[:-1].split())[1:]
    mp = convert(line2[:-1].split())[1:]
    RSRs.append([max(y - x, 0) for (x, y) in zip(mc, mp)])
    data.extend(RSRs[-1])

    cnt += 1
    if cnt % 1000 == 0:
        print("{} FIN!".format(cnt))

fm.close()
fp.close()

print("Raw structural reactivities are calculated.")

norm_factor = calc_norm_factor(data)
print("2%-8% normalization factor is calculated.")
print("Factor = {}.".format(norm_factor))

fout = open(argv[3], "w")
cnt = 0
for rsr in RSRs:
    fout.write(" ".join([str(min(x / norm_factor, 7.0)) for x in rsr]) + "\n")
    cnt += 1
    if cnt % 10000 == 0:
        print("{} FIN!".format(cnt))
fout.close()
