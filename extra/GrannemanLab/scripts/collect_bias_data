#!/usr/bin/env python

from sys import argv, exit
import pysam
from collections import namedtuple

BiasVec = namedtuple('BiasVec', ['name', 'length', 'c'])

def update(reads, bvecs):
	if len(reads) <= 0:
		return

	frac = 1.0 / len(reads)
	for read in reads:
		bvecs[read.reference_id].c[read.reference_start + abs(read.template_length) - 1] += frac


		
if len(argv) != 3:
	print("Usage: collect_bias_data input.bam output_name.bias")
	exit(-1)


sam_in = pysam.AlignmentFile(argv[1])
bvecs = []
for name, length in zip(sam_in.references, sam_in.lengths):
	bvecs.append(BiasVec(name = name, length = length, c = [0.0] * length))


cname = ""
reads = []
for read1 in sam_in:
	read2 = next(sam_in)
	if not read1.is_unmapped:
		if cname != read1.query_name:
			update(reads, bvecs)
			cname = read1.query_name
			reads = []
		reads.append(read1 if read1.reference_start <= read2.reference_start else read2)
update(reads, bvecs)
sam_in.close()

with open(argv[2], "w") as fout:
	for biasV in bvecs:
		fout.write(biasV.name + " " + str(biasV.length) + " " + " ".join(["{:.2f}".format(x) for x in biasV.c]) + "\n")
