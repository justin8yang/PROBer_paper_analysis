#!/usr/bin/env python

from sys import argv, exit
from math import ceil, floor
import numpy.random

try:
    xrange
except NameError:
    xrange = range


if len(argv) != 5:
    print("Usage: python makeFakeBeta annotation_path input.beta output.beta seed")
    exit(-1)

def extractTwoGroups(input_list):
    """ Extract two groups used for sampling """

    betas = [float(x) for x in input_list[2:]]
    betas.sort()
    n = len(betas)
    lb = int(ceil(0.05 * n))
    ub = int(floor(0.50 * n))
    noact = [str(x) for x in betas[lb:ub]]
    lb = int(ceil(0.75 * n)) - 1
    ub = int(floor(0.95 * n)) - 1
    act = [str(x) for x in betas[lb:ub]]

    return (n, noact, act)

def findIndicator(gtpath, rna, n):
    """ Return an indicator list showing where to sample DMS activity, 1 means active """

    inp = open("{}/{}_rRNA.structure".format(gtpath, rna))
    stru = [int(x) for x in inp.readline()[:-1].split()]
    inp.close()

    inp = open("{}/{}_rRNA.fa".format(gtpath, rna))
    inp.readline()
    seq = inp.readline()[:-1]
    inp.close()

    indicator = [0] * n
    for i in xrange(n):
        if stru[i] == 1 and (seq[i] == 'A' or seq[i] == 'C'):
            indicator[i] = 1

    return indicator

def sampling(n, ind, noact, act):
    """ Sampling """

    newb = []
    for i in xrange(n):
        if ind[i] == 0:
            newb.extend(list(numpy.random.choice(noact, 1)))
        else:
            newb.extend(list(numpy.random.choice(act, 1)))

    return newb

numpy.random.seed(int(argv[4]))

fin = open(argv[2])
fout = open(argv[3], "w")

line = fin.readline()
fout.write(line)

#18S
list18S = fin.readline()[:-1].split()
(n, noact, act) = extractTwoGroups(list18S)
ind = findIndicator(argv[1], "18S", n)
newb = sampling(n, ind, noact, act)
fout.write("\t".join(list18S[:2]) + "\t" + "\t".join(newb) + "\n")

#25S
list25S = fin.readline()[:-1].split()
(n, noact, act) = extractTwoGroups(list25S)
ind = findIndicator(argv[1], "25S", n)
newb = sampling(n, ind, noact, act)
fout.write("\t".join(list25S[:2]) + "\t" + "\t".join(newb) + "\n")

while True:
    line = fin.readline()
    if line == "":
        break
    fout.write(line)

fin.close()
fout.close()
